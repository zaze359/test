apply plugin: 'maven-publish'
//apply plugin: 'com.android.library'
//apply plugin: 'signing'

def loadProperties(Properties properties, List<File> files) {
    if (files != null && !files.isEmpty()) {
        for (File propertiesFile : files) {
            if (propertiesFile.exists()) {
                println("properties.load: " + propertiesFile.absolutePath)
                properties.load(propertiesFile.newDataInputStream())
            } else {
                println("properties not found: " + propertiesFile.absolutePath)
            }
        }
    }
}

Properties mavenProperties = new Properties()
loadProperties(mavenProperties, Arrays.asList(rootProject.file("buildscripts/maven.properties"), rootProject.file("local.properties")))

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

static def getReleaseRepositoryUrl(Properties properties) {
    return properties.getProperty('RELEASE_REPOSITORY_URL', "http://localhost:8081/repository/maven-releases/")
}

static def getSnapshotRepositoryUrl(Properties properties) {
    return properties.getProperty('SNAPSHOT_REPOSITORY_URL', "http://localhost:8081/repository/maven-snapshots/")
}

static def getRepositoryUsername(Properties properties) {
    return properties.getProperty('NEXUS_USERNAME', "zaze")
}

static def getRepositoryPassword(Properties properties) {
    return properties.getProperty('NEXUS_PASSWORD', "123456")
}

//java {
//    withJavadocJar()
//    withSourcesJar()
//}

def configurePom(mavenProperties, pom) {
    pom.name = mavenProperties.getProperty("POM_NAME")
    pom.packaging = mavenProperties.getProperty("POM_PACKAGING")
    pom.description = mavenProperties.getProperty("POM_DESCRIPTION")
    pom.url = mavenProperties.getProperty("POM_URL")

    pom.scm {
        url = mavenProperties.getProperty("POM_SCM_URL")
        connection = mavenProperties.getProperty("POM_SCM_CONNECTION")
        developerConnection = mavenProperties.getProperty("POM_SCM_DEV_CONNECTION")
    }

    pom.licenses {
        license {
            name = mavenProperties.getProperty("POM_LICENCE_NAME")
            url = mavenProperties.getProperty("POM_LICENCE_URL")
            distribution = mavenProperties.getProperty("POM_LICENCE_DIST")
        }
    }

    pom.developers {
        developer {
            id = mavenProperties.getProperty("POM_DEVELOPER_ID")
            name = mavenProperties.getProperty("POM_DEVELOPER_NAME")
        }
    }
}

afterEvaluate { project ->
    publishing {
        // 配置仓库地址
        repositories {
            maven {
                allowInsecureProtocol = true

                def releasesRepoUrl = getReleaseRepositoryUrl(mavenProperties)
                def snapshotsRepoUrl = getSnapshotRepositoryUrl(mavenProperties)
                url = isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl
                println("publishing repositories: " + url)
                credentials(PasswordCredentials) {
                    username = getRepositoryUsername(mavenProperties)
                    password = getRepositoryPassword(mavenProperties)
                    println("username: " + username)
                    println("password: " + password)
                }
//                artifact rpmArtifact
            }
        }

        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                from components.release
                groupId = GROUP
                artifactId = POM_ARTIFACT_ID
                version = VERSION_NAME
                configurePom(mavenProperties, pom)
            }
            // Creates a Maven publication called “debug”.
            debug(MavenPublication) {
                from components.debug
                groupId = GROUP
                artifactId = POM_ARTIFACT_ID
                version = VERSION_NAME + "-SNAPSHOT"
                configurePom(mavenProperties, pom)
            }
        }

        // 配置 publishingToMavenLocal 指令
        // 默认 .\.m2\repository\ 下
//        relocation(MavenPublication) {
//            pom {
//                // Old artifact coordinates
//                groupId = "com.example"
//                artifactId = "lib"
//                version = "2.0.0"
//
//                distributionManagement {
//                    relocation {
//                        // New artifact coordinates
//                        groupId = "com.new-example"
//                        artifactId = "lib"
//                        version = "2.0.0"
//                        message = "groupId has been changed"
//                    }
//                }
//            }
//        }
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
            options.encoding = "UTF-8"
        }
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.source
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    excludes = ['**/*.kt']
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

// 配置源码路径
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
}

// 将源码打包到 aar
artifacts {
    archives androidSourcesJar
//            archives androidJavadocsJar
}


//signing {
//    sign(publishing.publications["mavenJava"])
//}

//signing {
//    publishing.publications.all { publication ->
//        sign publication
//    }
//}