/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

version = VERSION_NAME
group = GROUP


def loadProperties(Properties properties, List<String> files) {
    if (files != null && !files.isEmpty()) {
        for (String fileName : files) {
            File propertiesFile = project.file(rootProject.file(fileName))
            if (propertiesFile.exists()) {
                println("properties.load: " + fileName)
                properties.load(propertiesFile.newDataInputStream())
            }
        }
    }
}

Properties properties = new Properties()
loadProperties(properties, Arrays.asList('maven.properties', 'local.properties'))

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl(Properties properties) {
    return properties.getProperty('RELEASE_REPOSITORY_URL', "http://localhost:8081/repository/maven-releases/")
}

def getSnapshotRepositoryUrl(Properties properties) {
    return properties.getProperty('SNAPSHOT_REPOSITORY_URL', "http://localhost:8081/repository/maven-snapshots/")
}

def getRepositoryUsername(Properties properties) {
    return properties.getProperty('NEXUS_USERNAME', "zaze")
}

def getRepositoryPassword(Properties properties) {
    return properties.getProperty('NEXUS_PASSWORD', "123456")
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME
                repository(url: getReleaseRepositoryUrl(properties)) {
                    authentication(userName: getRepositoryUsername(properties), password: getRepositoryPassword(properties))
                }
//                snapshotRepository(url: getSnapshotRepositoryUrl(properties)) {
//                    authentication(userName: getRepositoryUsername(properties), password: getRepositoryPassword(properties))
//                }
                snapshotRepository(url: "http://localhost:8081/repository/maven-snapshots/") {
                    authentication(userName: "zaze", password: "123456")
                }

                pom.project {
                    name POM_NAME
                    packaging 'aar'
                    description POM_DESCRIPTION
                    url ''

                    scm {
                        url ''
                        connection ''
                        developerConnection ''
                    }

                    licenses {
                        license {
                            name properties.getProperty("POM_LICENCE_NAME")
                            url properties.getProperty("POM_LICENCE_URL")
                            distribution properties.getProperty("POM_LICENCE_DIST")
                        }
                    }

                    developers {
                        developer {
                            id properties.getProperty("POM_DEVELOPER_ID")
                            name properties.getProperty("POM_DEVELOPER_NAME")
                            email properties.getProperty("POM_DEVELOPER_EMAIL")
                        }
                    }
                }
            }
        }
    }
//
    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
//
    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from 'src/main/java'
    }

    artifacts {
        archives androidSourcesJar
//        archives androidJavadocsJar
    }
//
//    android.libraryVariants.all { variant ->
//        def name = variant.buildType.name
//        if (!name.equals("debug")) {
//            def task = project.tasks.create "jar${name.capitalize()}", Jar
//            task.dependsOn variant.javaCompile
//            task.from variant.javaCompile.destinationDir
//            artifacts.add('archives', task)
//        }
//    }
}